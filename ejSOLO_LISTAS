# ----- DE TODO UN PARCIAL - 2023

# 1) Acomodar [2 puntos]
# El próximo 19 de Noviembre se realizará en Argentina la segunda vuelta de las
# elecciones presidenciales. En esta competirán solo 2 listas (Lista UP; Lista
# LLA). En la mayor parte del país los salones de las escuelas ofician de cuartos
# oscuros. En ellos, las autoridades de mesa colocan las boletas sobre los
# pupitres. Dado que esta elección se realizará en una eṕoca donde muy
# probablemente haga mucho calor, no será raro el caso en el cual las boletas se
# vuelen y mezclen a causa de ventiladores prendidos a máxima potencia. Cuando
# esto ocurra, las autoridades deberán entrar al cuarto oscuro, juntar todas las
# boletas, acomodarlas por partido y volver a distribuirlas en sus lugares.
# Implementar una función acomodar que tome una lista con strings que
# representan el nombre de lista (UP o LLA) y devuelva una lista con la misma
# cantidad de elementos de cada uno de los posibles strings pero agrupadas, las
# de Lista UP al principio y las de lista LLA al final.

# No está permitido utilizar las funciones sort() y reverse().

# problema acomodar (in s: seq<String>) : seq<String> {
#     requiere: { Todos los elementos de s son o bien "LLA" o bien "UP"}
#     asegura: {|res| = |s|}
#     asegura: { Todos los elementos de res son o bien "LLA" o bien "UP"}
#     asegura: {res contiene la misma cantidad de elementos "UP" que s}
#     asegura: {res contiene todas las apariciones de "UP" antes de las
#     apariciones de "LLA"}
# }
# Por ejemplo, dada
# s = ["LLA", "UP", "LLA", "LLA", "UP"]
# se debería devolver res = ["UP", "UP", "LLA", "LLA", "LLA"]


"""
# 2) Posición umbral [2 puntos]
# Durante una noche en un restaurant pasan varios grupos de diversa cantidad de
# personas. Para llevar control de esto, el dueño va anotando en su libreta
# cuánta gente entra y sale. Para hacerlo rápido decide que la mejor forma de
# llevarlo adelante es escribir un número al lado del otro, usando números
# positivos para los grupos que entran y negativos para los que salen. Gracias a
# estas anotaciones el dueño es capaz de hacer análisis del flujo de clientes.
# Por ejemplo, le interesa saber en qué momento de la noche superó una
# determinada cantidad de clientes totales que ingresaron (sin importar cuántos
# hay en el momento en el local).

# Implementar la función pos_umbral, que dada una secuencia de enteros (puede
# haber negativos) devuelve la posición en la cual se supera el valor de umbral,
# teniendo en cuenta sólo los elementos positivos. Se debe devolver -1 si el
# umbral no se supera en ningún momento

# problema pos_umbral (in s: seq<Z>, in u: Z) : Z {
#     requiere: {u ≥ 0}
#     asegura: {res=-1 si el umbral no se supera en ningún momento }
#     asegura: {Si el umbral se supera en algún momento, res es la primera
#     posición tal que la sumatoria de los primeros res+1 elementos
#     (considerando solo aquellos que son positivos) es estrictamente mayor que
#     el umbral u }
# Por ejemplo, dadas
# s = [1,-2,0,5,-7,3]
# u = 5
# se debería devolver res = 3



# 3) Columnas repetidas [3 puntos]
# Implementar la función columnas_repetidas, que dada una matriz no vacía de m
# columnas (con m par y m ≥ 2) devuelve True si las primeras m/2 columnas son
# iguales que las últimas m/2 columnas. Definimos a una secuencia de secuencias
# como matriz si todos los elementos de la primera secuencia tienen la misma
# longitud.

# problema columnas_repetidas(in mat:seq<seq<Z>>) : Bool {
#     requiere: {|mat| > 0}
#     requiere: {todos los elementos de mat tienen igual longitud m, con m > 0
#     (los elementos de mat son secuencias)}
#     requiere: {todos los elementos de mat tienen longitud par (la cantidad de
#     columnas de la matriz es par)}
#     asegura: {(res = true) <=> las primeras m/2 columnas de mat son iguales a
#     las últimas m/2 columnas}
# }

# Por ejemplo, dada la matriz
# m = [[1,2,1,2],[-5,6,-5,6],[0,1,0,1]]
# se debería devolver res = true
# TIP: para dividir un número entero x por 2 y obtener como resultado un número
# entero puede utilizarse la siguiente instrucción: int(x/2)

-----OTRO PARCIAL 

# 3) Cuasi Ta-Te-Ti (2 puntos)
# Ana y Beto juegan al Ta-Te-Ti-Facilito. El juego es en un tablero cuadrado de lado entre 5 y 10. Cada jugador va poniendo su
# ficha en cada turno. Juegan intercaladamente y comienza Ana. Ana pone siempre una "X" en su turno y Beto pone una "O" en 
# el suyo. Gana la persona que logra poner 3 fichas suyas consecutivas en forma vertical. SI el tablero está completo y no ganó
# nadie, entonces se declara un empate. El tablero comienza vacío, representado por " " en cada posición.
# Notar que dado que juegan por turnos y comienza Ana poniendo una "X" se cumple que la cantidad de "X" es igual a la 
# cantidad de "O" o bien la cantidad de "X" son uno más que la cantidad de "O".
# Se nos pide implementar una función en python 'problema_quien_gano_el_tateti_facilito' que determine si ganó alguno, o si
# Beto hizo trampa (puso una 'O' cuando Ana ya había ganado).

# problema quien_gano_el_tateti_facilito(in tablero: seq<seq<Char>>) : Z{
# requiere: {tablero es una matriz cuadrada}
# requiere: {5 <= |tablero[0]| <= 10]}
# requiere: {tablero sólo tiene 'X', 'O' y '' (espacio vacío) como elementos}
# requiere: {En tablero la cantidad de 'X' es igual a la cantidad de 'O' o bien la cantidad de 'X' es uno más que la cantidad de
# 'O'}
# asegura: {res = 1 <==> hay tres 'X' consecutivas en forma vertical (misma columna) y no hay tres 'O' consecutivas en forma
# vertical(misma columna)}
# asegura: {res = 0 <==> no hay tres 'O' ni hay tres 'X' consecutivas en forma vertical}
# asegura: {res = 3 <==> hay tres 'X' y hay tres 'O' consecutivas en forma vertical (evidenciando que beto hizo trampa)}
# }


# 4) Cuántos palíndromos sufijos (2 puntos)
# Decimos que una palabra es palíndromo si se lee igual de izquierda a derecha que de derecha a izquierda. Se nos pide
# programar en python la siguiente función:

# problema cuantos_sufijos_son_palindromos(in texto:String) : Z{
# requiere: -
# asegura: {res es igual a la cantidad de palíndromos que hay en el conjunto de sufijos de texto}
# }

# Nota: un sufijo es una subsecuencia de texto que va desde una posición cualquiera hasta el final de la palabra. Ej: "Diego",
# el conjunto de sufijos es: "Diego", "iego", "ego", "go", "o". Para este ejercicio no consideramos a "" como sufijo de ningún
# texto.



-----OTRO PARCIAL

# 4) Nivel de ocupacion del hospital
# Queremos saber qué porcentaje de ocupación de camas hay en el hospital. El hospital se representa por una matriz en
# donde las filas son los pisos, y las columnas son las camas. Los valores de la matriz son booleanos que indican si la cama
# está ocupada o no. Si el valor es verdadero (True) indica que la cama está ocupada. Se nos pide programar en python una
# función que devuelve una secuencia de enteros, indicando la proporción de camas ocupadas en cada piso.

# problema nivel_de_ocupacion(camas_por_piso: seq<Seq<Bool>>): seq<R> {
# requiere: {Todos los pisos tienen la misma cantidad de camas}
# requiere: {Hay por lo menos 1 piso en el hospital}
# requiere: {Hay por lo menos una cama por piso}
# asegura: {|res| = |camas|}
# asegura: {Para todo 0 <= i < |res| se cumple que res[i] es igual a la cantidad de camas ocupadas del piso i dividido del total
# de camas del piso i}
# }

----OTRO PARCIAL

# 1) Códigos filtrados [2 puntos]
# El hijo del dueño de la veterinaria, cuya actividad principal es ver tik toks, cree que los productos 
# cuyos código de barras terminimoan en números primos son especialmente auspiciosos y deben ser destacados
# en la tienda. Luego de convencer a su padre de esta idea, solicita una función en python que facilite
# esta gestión.

# Se pide implementar una función que, dada una secuencia de enteros, cada uno representando un código 
# de barras de un producto, cree y devuelva una nueva lista que contenga únicamente aquellos números de 
# la lista original cuyos últimos tres dígitos formen un número primo (por ejemplo, 101, 002 y 011).

# Nota: un número primo es aquel que solo es divisible por si mismo y por 1. Algunos ejemplos de hasta 
# tres dígitos son 2, 3, 4, 101, 103, 107, etc.

# problema filtrar_codigos_primos(in codigos_barra: seq<Z>) : seq<Z> {
# requiere: {Todos los enteros de codigos_barra tienen, por lo menos, 3 dígitos}
# requiere: {No hay elementos repetidos en codigos_barra}
# asegura: {los últimos 3 dígitos de cada uno de los elementos de res forman un número primo}
# asegura: {Todos los elementos de codigos_barra cuyos últimos 3 dígitos forman un número primo 
# están en res}
# asegura: {Todos los elementos de res están en codigos_barra}
# }


# 3) Matriz de responsables por turnos [2 puntos]

# Las personas responsables de los turnos están anotadas en una matriz donde las columnas representan los
# días, en orden de lunes a domingo, y cada fila a un rango de una hora. Hay cuatro filas para los turnos 
# de la mañana (9, 10, 11 y 12 hs) y otras cuatro para la tarde (14, 15, 16 y 17).

# Para hacer más eficiente el trabajo del personal de la veterinaria, se necesita analizar si quienes 
# quedan de responsables, están asignadas de manera continuada en los turnos de cada día.

# Para ello se pide desarrollar una función en Python que, dada la matriz de turnos, devuelva una lista
# de tuplas de Bool, una por cada día. Cada tupla debe contener dos elementos. El primer elemento debe ser
# True sí y solo sí todos los valores de los turnos de la mañana para ese día son iguales entre sí. El 
# segundo elemento debe ser True sí y solo sí todos los valores de los turnos de la tarde para ese día 
# son iguales entre sí. Siempre hay una persona responsable en cualquier horario de la veterinaria.

# problema un_responsable_por_turno(in grilla_horaria: seq<seq<String>>): seq<(Bool x Bool)> {
# requiere: {|grilla_horaria| = 8}
# requiere: {Todos los elementos de grilla_horaria tienen el mismo tamaño (mayor a 0 y menor a 8)}
# requiere: {No hay cadenas vacías en las listas de grilla_horaria}
# asegura: {|res| = |grilla_horaria[0]|}
# asegura: {El primer valor de la tupla en res[i], con i:Z, 0 <= i < |res| es igual a True <==> los primeros
# 4 valores de la columna i de grilla_horaria son iguales entre sí}
# asegura: {El segundo valor de la tupla en res[i], con i:Z, 0 <= i < |res| es igual a True <==> los últimos
# 4 valores de la columna i de grilla_horaria son iguales entre sí}
# }



# 4) Subsecuencia más larga [2 puntos]

# Con el objetivo de organizar el flujo de pacientes, en la veterinaria se anotan los tipos de mascotas
# que van ingresando al local. Se necesita identificar las consultas que involucran solo a perros y gatos.
# Por eso, se decide desarrollar una función en Python que encuentre la secuencia más larga de consultas
# consecutivas que solo contenga los tipos de mascota "perro" o "gato".

# Se pide implementar una función que, dada una secuencia de Strings, que representan los tipos de animales
# atendidos, devuelva el índice donde comienza la subsecuencia más larga que cumpla con estas condiciones.

# problema subsecuencia_mas_larga(in tipos_pacientes_atendidos: seq<String>): Z{
# requiere: {tipos_pacientes_atendidos tiene, por lo menos, un elemento "perro" o "gato"}
# asegura: {res es el índice donde empieza la subsecuencia más larga de tipos_pacientes_atendidos que
# contenga solo elementos "perro" o "gato"}
# asegura: {Si hay más de una subsecuencia de tamaño máximo, res tiene el índice de la primera}
# }


"""
